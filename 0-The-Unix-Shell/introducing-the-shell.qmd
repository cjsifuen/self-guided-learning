---
title: "Introducing the Shell"
order: 13
fig-align: center
fig-cap-location: bottom
engine: knitr
code-fold: false
execute:
  echo: true
  code-tools: true
---

### What is the shell?

The `shell` is one of the ways we can interact with a computer. It is a program that allows us to tell the computer what to do by giving it a "command". For this reason, it is also commonly called the `command-line` or `command-line interface (CLI)`.

::: {.callout-tip}

Other names for the `shell` are `terminal`, `Bash`, `UNIX command line`, and more.

:::

Another, perhaps more common way we tell the computer what to do is through the use of a graphical user interface (GUI). This usually involves a "point and click" approach.

::: {#fig-user-interfaces layout-ncol=2}

![Command Line Interface (CLI)](/images/terminal.png){#fig-terminal}

![Graphical User Interface (GUI)](/images/gui.png){#fig-gui}

Different ways to interact with a computer
:::

---

### Why use the shell?

Isn't pointing and clicking easier? Imagine you had the following task:

:::{.callout-note appearance="minimal"}
You have a directory with 10 `.txt` files.

Pull the first line from each file into a single new file. You should end up with a list of all of the first lines.
:::

Take a look below to see the process for GUI and CLI.

:::{.panel-tabset}
## GUI Steps
```
1. Create new file
2. Open file 1, copy line 1, paste into new file, close file 1.
3. Open file 2, copy line 1, paste into new file, close file 2.
4. Repeat 7 more times
```

## CLI Code
```
head -n1 -q *.txt > new-file.txt
```
:::

For this task, the GUI was tedious, time-consuming, and error-prone while the CLI was a single-command, quick, and _relatively error proof_.

---

### Logging In

Let's start using the `shell`. Open the `shell` (`terminal`) on your computer. Select the appropriate instructions below, based on your operating system.

:::{.panel-tabset}
## Windows Instructions

1. Go the the start menu and enter `cmd`.
2. Select the `Command Prompt` application.
3. Once the `Command Prompt` opens, enter the command to connect to the AWS instance we will be using.
4. Enter the password. 

:::{.callout-important}
_Note:_ As you type your password, nothing on the screen will change. No `letters` or `*` characters will show up, etc. After you press enter, you’ll receive a response.
:::

If you haven’t connected to the remote system previously, you’ll get a prompt asking if you’re sure you want to connect to this new system. Type `yes` and press enter, and then you will proceed logging in.

## macOS Instructions

1. Search for `Terminal`.
2. Select the `Terminal` application to open.
3. Once in the `Terimnal` opens, enter the command to connect to the AWS instance we will be using.
4. Enter the password. 

:::{.callout-important}
_Note:_ As you type your password, nothing on the screen will change. No `letters` or `*` characters will show up, etc. After you press enter, you’ll receive a response.
:::

If you haven’t connected to the remote system previously, you’ll get a prompt asking if you’re sure you want to connect to this new system. Type `yes` and press enter, and then you will proceed logging in.

:::

---

### Using the shell

Once we open our terminal, the `$` shows us that `shell` is ready for input.

Let's see what day it is using the `cal` command.

- `cal` stands for calendar
- prints out the calendar to the terminal

In your terminal, type `cal` and press enter.

```{bash}
#| eval: true
#| output: true
cal
```

Before we learn more commands, let's learn about the structure of commands.

---

### Command syntax

Commands follow a general syntax  
`command option argument`

- `command` -- the main command
- `option` -- modifies the behavior of the command
- `argument` -- the source and/or target of the command

::: {.callout-note}
## Note

- Options use either `-` or `--` to signal their usage.
- Options are sometimes called flags.
- Arguments are sometimes called parameters.
- Depending on the command, arguments can be either a target (as in the `ls` command) or both a source and target (as in the `mv` command)
- Depending on the command, arguments do not always need to be specified
:::

Let's change the way `cal` command behaves by providing a value for the `option`.

In your terminal, type `cal -j` and press enter. 

```{bash}
cal -j
```

This `-j` option/flag told the computer that we want to return the calendar using the "Julian" date, which is a numbered day starting at January 1. 

---

### Getting help

Command usage is not always intuitive. Additionally, we're often not aware of all the options/flags that can be used with a particular command. If you need help with how to use a command, you can try the following (depending on the command).

| Method of getting help | Description | Example |
| ----- | ----- | ----- |
| `--help` or `-h` option/flag |  Displays help menu for the command/program | `cal --help` |
| `man` command | Displays the manual for the command/program in-depth | `man cal` |

::: {#fig-help layout-ncol=2}

![Using the `--help` flag](/images/cal-help.png){#fig-help}

![Using the `man` command](/images/man-cal.png){#fig-man}

Different ways to get help with a command.
:::

---

### Making sense of errors

The shell provides (usually) helpful and informative error messages. If you look closely at the `cal --help` example above, you'll see that the usage of `--help` actually resulted in an error.

```
cal: illegal option -- -
Usage: cal [general options] [-hjy] [[month] year]
       cal [general options] [-hj] [-m month] [year]
       ncal [general options] [-hJjpwy] [-s country_code] [[month] year]
       ncal [general options] [-hJeo] [year]
General options: [-NC3] [-A months] [-B months]
For debug the highlighting: [-H yyyy-mm-dd] [-d yyyy-mm]
```

The error above tells us:  
1. `-` is an illegal option  
2. The correct usage and options for `cal`

Before we move on to learning about the `File System`, try typing three random letters into your terminal and see what happens. Did you receive an error or did you somehow type an actual command?

---
