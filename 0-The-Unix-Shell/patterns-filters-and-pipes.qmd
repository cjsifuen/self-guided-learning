---
title: "Patterns, Filters, and Pipes"
order: 15
fig-align: center
fig-cap-location: bottom
engine: knitr
execute:
  echo: true
  code-tools: true
---

```{r setup, include=TRUE, echo=FALSE, eval=TRUE, cache=FALSE}
knitr::opts_knit$set(root.dir = normalizePath("~/Desktop/shell-lesson-data"))
```

### Pattern Matching

Wildcards (special characters) can be used in several ways:

- _**Standard wildcards (globbing)**_ -- matching to work on a set of files 
- _**Regular expressions**_ -- matching to work within files

---

#### Standard Expansion Patterns

Standard wildcards are used for globbing files -- pulling together files to perform an action on them.

+----------+-----------------------------------------------------------------------------------+
| Wildcard | Represents                                                                        |
+:========:+===================================================================================+
| `*`      | 0 or more characters                                                              |
|          |                                                                                   |
|          | - `a*e` would match `ae`, `a103e`, `apple`                                        |
+----------+-----------------------------------------------------------------------------------+
| `?`      | Any single character                                                              |
|          |                                                                                   |
|          | - `a?e` would match `a1e`, `ape`, `are`                                           |
+----------+-----------------------------------------------------------------------------------+
| `[]`     | Any one of the characters within the brackets (comma separated list)              |
|          |                                                                                   |
|          | - `m[a,3,n]s` would match `mas`, `m3s`, `mns`                                     |
|          | - `[1-3]a` would match `1a`, `2a`, `3a`                                           |
+----------+---------------------------------+-------------------------------------------------+
| `{}`     | Any term within the brackets (comma separated list)                               |
|          |                                                                                   |
|          | - `ls {*.doc, *.pdf}` would list all files ending in `.doc` and `.pdf`            |
+----------+-----------------------------------------------------------------------------------+
| `[!]`    | Anything except (negate) the character within the brackets (comma separated list) |
|          |                                                                                   |
|          | - `ls *[!A,B].txt` would match `123.txt`, `ZNEBF.txt`, `C.txt`                    |
+----------+-----------------------------------------------------------------------------------+
| `\`      | "Escapes" the following character, to treat it as a non-special character         |
|          |                                                                                   |
|          | - `ls *\.*.txt` would match `this.file.txt`, NOT `this.txt`                       |
+----------+-----------------------------------------------------------------------------------+

Let's try some examples in our `shell-lesson-data` directory.

:::{.panel-input}

_**Q&A**_: How can we list all files in `shell-lesson-data/north-pacific-gyre` that end with `.txt`?


::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_  

```{bash}
#| eval: TRUE

# change into directory 
cd ~/Desktop/shell-lesson-data/north-pacific-gyre

# use * wildcard to list all ending in .txt
ls *.txt
```

:::

:::


:::{.panel-input}

_**Q&A**_: List the files in `shell-lesson-data/north-pacific-gyre` that do not end with `.txt`.


::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_  

```{bash}
#| eval: TRUE

# change into directory 
cd ~/Desktop/shell-lesson-data/north-pacific-gyre

# use ! to with the [] to negate all files ending in .txt
ls *[!.txt]
```

:::

:::


:::{.panel-input}

_**Q&A**_: List the files in `shell-lesson-data/north-pacific-gyre` with the _last two positions before the suffix_ are a number lower than 5, followed by not Z.


::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_  

```{bash}
#| eval: TRUE

# change into directory 
cd ~/Desktop/shell-lesson-data/north-pacific-gyre

# use ! to with the [] to negate all files ending in .txt
ls *[0-4][!Z].*
```

:::

:::

---

#### Regular Expressions (`regex`)

A complex form of pattern matching that combines "wildcards" to create powerful patterns for text matching and manipulation in files.

::: {.callout-tip}
Used with `grep` to search for text -- which we'll explain in a bit.

- `regex` symbols are interpreted by the commands above
:::

---

##### What makes a pattern?

To _efficiently_ represent a pattern, we need to develop a language that specifies

- atom -- the actual character that we want to match
- positions -- the location of this atom
- number of times -- how many times we see the atom
- groups -- groups of matched atoms or non-matched

---

###### Representing Atoms

Character classes are used to represent atoms.

+-----------------------------------+---------------------------------------------------------------+
| Character class -- Example        | Matches                                                       |
+:=================================:+===============================================================+
| Non-special characters -- `a`     | `a` matches `a`                                               |
+-----------------------------------+---------------------------------------------------------------+
| Dot -- `.`                        | `.` matches ANYTHING                                          |
+-----------------------------------+---------------------------------------------------------------+
| Range -- `[a-z]`                  | `[a-z]` matches any letter from `a` through `z`               |
+-----------------------------------+---------------------------------------------------------------+
| Character set -- `[abc]`          | `[abc]` matches `a`, `b`, or `c`                              |
+-----------------------------------+---------------------------------------------------------------+
| Character set -- `[[:alnum:]]`    | `[[:alnum:]]` matches any alpha-numeric character             |
+-----------------------------------+---------------------------------------------------------------+
| Character set -- `[[:lower:]]`    | `[[:lower:]]` matches any lowercase letter                    |
+-----------------------------------+---------------------------------------------------------------+
| Character set -- `[[:space:]]`    | `[[:space:]]` matches any whitespace                          |
+-----------------------------------+---------------------------------------------------------------+
| Character set -- `[[:digit:]]`   | `[[:digit:]]` matches any digit                               |
+-----------------------------------+---------------------------------------------------------------+
| Negated character set -- `[^abc]` | `[^abc]` matches anything ***except*** `a`, `b`, or `c`       |
+-----------------------------------+---------------------------------------------------------------+
| Whitespace -- `\s`                | `\s` matches any whitespace character                         |
+-----------------------------------+---------------------------------------------------------------+
| Non-whitespace -- `\S`            | `\S` matches any non-whitespace character                     |
+-----------------------------------+---------------------------------------------------------------+
| Word -- `\w`                      | `\w` an entire word (continuous alpha-numeric or underscores) |
+-----------------------------------+---------------------------------------------------------------+
| Non-word -- `\W`                  | `\W` ***not*** a word                                         |
+-----------------------------------+---------------------------------------------------------------+
| Digit -- `\d`                     | `\d` any digit                                                |
+-----------------------------------+---------------------------------------------------------------+
| Non-digit -- `\D`                 | `\D` ***not*** a digit                                        |
+-----------------------------------+---------------------------------------------------------------+

---

###### Positions

Anchors are used to specify the location of characters or set of characters -- so the pattern will only match if the position also matches.

+-----------------------------------+---------------------------------------------------------------+
| Anchor                            | Example(s)                                                    |
+:=================================:+===============================================================+
| Start of line/string -- `^`       | `^a` matches the `a` in `apple`, but not `sandal`             |
+-----------------------------------+---------------------------------------------------------------+
| End of line/string -- `$`         | `a$` matches the `a` in `spa`, but not `space`                |
+-----------------------------------+---------------------------------------------------------------+

---

###### Number of times

Quantifiers are used to specify the number of times preceeding characters or sets of characters are repeated.

+-----------------------------------+---------------------------------------------------------------+
| Quantifier                        | Example(s)                                                    |
+:=================================:+===============================================================+
| 0 or 1 time -- `?`                | `re?d` matches `rd`, `red`, NOT `reed`, `read`                |
+-----------------------------------+---------------------------------------------------------------+
| 0 or more times -- `*`            | `re*d` matches `rd`, `red`, `reed`, NOT `read`                |
+-----------------------------------+---------------------------------------------------------------+
| 1 or more times -- `+`            | `re+d` matches `red`, `reed`, NOT `rd`, `read`                |
+-----------------------------------+---------------------------------------------------------------+
| Specified number of times -- `{}` | `re{1}d` matches `red`, NOT `rd`, `reed`, `read`              |
+-----------------------------------+---------------------------------------------------------------+
| Range of times -- `{1,3}`         | `re{1,3}d` matches `red`, `reed`, NOT `rd`, `read`            |
+-----------------------------------+---------------------------------------------------------------+
| Or -- `|`                         | `re(e|a)d` matches `reed`, `read`, NOT `rd`, `red`            |
+-----------------------------------+---------------------------------------------------------------+ 

---

###### Groups and Reference

Matched atoms can be grouped together and referenced later.

+-----------------------------------+---------------------------------------------------------------+
| Grouping/Reference                | Example(s)                                                    |
+:=================================:+===============================================================+
| Capture the group -- `()`         | `(re)d` groups `re` together                                  |
+-----------------------------------+---------------------------------------------------------------+
| Reference the group -- `\1`       | `\1` references the first group captured                      |
+-----------------------------------+---------------------------------------------------------------+

---

##### Practicing with Regex

Learning `regex` takes time and practice! 

:::{.panel-input}

_**Question 1**_: 

Which expression will select only `the` in the following?

"The great thing about learning is that the experience itself teaches you something, though it may not be the thing you wanted to learn."

a. `the`
b. `(T|t)e`
c. `[Tt]he`
d. `*he`

::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_ 

a. Yes. This will match `the`.
b. No. This will also match `The`.
c. No. This will also match `The`.
d. No. This will also match `The`.

:::

:::

:::{.panel-input}

_**Question 2**_: 

Which expression will select all of the following?

```
foxes boxes loxes
```

a. `.oxes`
b. `[fbl]oxes`
c. `(f|b|l)oxes`
d. `*oxes`

::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_ 

a. Yes. `.` will match anything for the first character.
b. Yes. Uses character set matching.
c. Yes. Uses or matching.
d. No. `*` is a quantifier and references nothing.

:::

:::

:::{.panel-input}

_**Question 3**_: 

Which expression will select all of the following?

```
nd ned need
```

a. `ne+d`
b. `ne?d`
c. `ne*d`
d. `ne.d`

::: {.callout-note collapse="true" icon="false"}
### _Click here for the answer_ 

a. No. `+` matches `e` 1 or more times.
b. No. `?` matches `e` 0 or 1 times.
c. Yes. `*` matches `e` 0 or more times.
d. No. `.` matches anything one time exactly.

:::

:::

For more practice, I recommend [RegexOne](https://regexone.com/)

---

### Using regex with `grep`

Regular expressions are most effective when used with specific commands.

#### `grep` -- globally search a regular expression and print

Searches for a pattern within a file and returns the line containing the pattern.

:::{.callout-tip}
By default, `grep` returns the line containing the pattern and is case-sensitive.

A few of the useful options are below:

- use `-i` to peform case-insensitive matching
- use `-v` to return the non-matching lines
- use `-w` to return the word instead of the line that matches
- use `-A` to return the line after the matching line
- use `-B` to return the line before the matching line
- use `-E` to use extended regular expressions
- use `-c` to return the number of times a match is seen
- use `-n` to output the line number that matches
:::

|Command | Options/Flags | Arguments |
|--------|---------------|-----------|
|`grep` | `flags` | `pattern` `/path/to/file` |

Let's try this on a few files in our `shell-lesson-data/exercise-data/creatures` directory.

If we take a look at top 5 lines of each file (`head` command) we see:

```{bash}
#| eval: true
#| cache: true
# cd into the directory
cd ~/Desktop/shell-lesson-data/exercise-data/creatures

# print the first 5 lines each file 
head -n 5 *
```

Using `grep`, let's pull out the common names line of all of the creatures.

```{bash}
#| eval: true
#| cache: true
# cd into the directory
cd ~/Desktop/shell-lesson-data/exercise-data/creatures

# grep COMMON NAME from all files ending in .dat 
grep 'COMMON NAME' *.dat
```

Using grep, let's check how many times the `CCC` is seen in each creatures genomic sequence.

```{bash}
#| eval: true
#| cache: true
# cd into the directory
cd ~/Desktop/shell-lesson-data/exercise-data/creatures

# grep COMMON NAME from all files ending in .dat 
grep -c 'CCC' *.dat
```

What if we want just the first line following the common name `unicorn`?

```{bash}
#| eval: true
#| cache: true
# cd into the directory
cd ~/Desktop/shell-lesson-data/exercise-data/creatures

# grep COMMON NAME from all files ending in .dat 
grep -A 1 'unicorn' *.dat
```

What if we wanted anything updates in the 1740's? We need to use `-E` option to use the extended regular expressions we covered earlier.

```{bash}
#| eval: true
#| cache: true
# cd into the directory
cd ~/Desktop/shell-lesson-data/exercise-data/creatures

# grep COMMON NAME from all files ending in .dat 
grep -E '174\d-\d{2}-\d{2}' *.dat
```

As we can see, `grep` and pattern matching is useful, but it becomes even more powerful it we combine it with filtering.

---

### Filtering

In unix, we can filter data in many ways. Here we'll cover a few light, but useful commands to do so.

#### `cut` -- filtering data from each line, cutting columns/fields out

Filter data ("cut") based upon a separator.

|Command | Options/Flags | Arguments |
|--------|---------------|-----------|
|`cut` | `flags` | `file/input` |

::: {.callout-tip icon="true"}

The `cut` command separates fields by tabs by default.

Some useful flags are below:

- use `-d` to set the delimeter between fields to another character
- use `-f` to list the fields to cut (can create a list `-f 2,3` cuts field 2 and 3. `-f 3-5` cuts field 3 to 5.)

:::

Let's take a look at the `animals.csv` file in `shell-lesson-data/exercise-data/animal-counts`.

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data/exercise-data/animal-counts

# look at file
head -n 3 animals.csv
```

Let's keep only the animals and counts -- fields 2 and 3 if we consider the comma as the field separator.
```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data/exercise-data/animal-counts

# cut to keep the second field (-f), using comma as a field separator (-d)
cut -f2,3 -d ',' animals.csv
```

---

#### `uniq` -- report or filter out repeated lines

Filters out repeated ADJACENT lines, but also allows for counting them, or ignoring a specific number of them.

|Command | Options/Flags | Arguments |
|--------|---------------|-----------|
|`uniq` | `flags` | `input/file` `output/file` |

::: {.callout-tip icon="true"}

The `uniq` command is case sensitive by default and removes all duplicated adjacent lines. ***Thus, sorting prior is recommended.***

Some useful flags are below:

- use `-c` add the count of the number of times the line occurs
- use `-i` to ignore case

:::

If a file looked like this:
```{bash}
#| eval: FALSE
#| cache: true
$ cat animals.txt
bear
deer
deer
fox
rabbit
rabbit
rabbit
raccoon
```

Then `uniq`, with counts would output
```{bash}
#| eval: FALSE
#| cache: TRUE
uniq -c animals.txt
   1 bear
   2 deer
   1 fox
   3 rabbit
   1 raccoon
```

---

#### `sort` -- order lines of a file

Sorts a file or input in a highly customizable way.

|Command | Options/Flags | Arguments |
|--------|---------------|-----------|
|`sort` | `flags` | `file/input` |

::: {.callout-tip icon="true"}

The `sort` command is case sensitive by default sorts lexiconically

Some useful flags are below:

- use `-t` to specify the field separator
- use `-i` to ignore case 
- use `-c` to check if a file is sorted
- use `-k` to specify a field to sort on
- use `-u` to keep unique lines
- use `-n` to perform a numberic sort

:::


Let's sort the animals file by the second field (-k), using the commma as the field separator (-t).

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data/exercise-data/animal-counts

# cut to keep the second field (-f), using comma as a field separator (-d)
sort -t , -k 2 animals.csv
```

---

#### `grep` -- globally search a regular expression and print

Returns filtered lines, can also negate lines.

|Command | Options/Flags | Arguments |
|--------|---------------|-----------|
|`grep` | `flags` | `pattern` `/path/to/file` |

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data/exercise-data/animal-counts

# give me the lines that do not have an animal that ends in r
grep -Ev ',\w+r,' animals.csv
```

--- 

### Pipes

Pipes (`|`) are used to quickly connect unix commands by "piping" output of one command to the input of another.

```
command1 | command2 | command3
```

#### Download the gtf

We will download the file with `wget` or `curl`.  

In the terminal, type `which wget`, and `which curl`. 

- If you see a path returned when you type one of those commands and press enter, then you have that command.

```{bash}
#| eval: true
#check for wget
which wget

#check for curl
which curl
```

---

You can download the file as below, depending on the command you want to use.

:::{.panel-tabset}

## `wget`
```{bash}
#| eval: false
#| cache: TRUE
#| class-output: .output-scroll
# cd to ~/Desktop/shell-lesson-data
cd ~/Desktop/shell-lesson-data

# wget file (using capital -O as the flag to create a gzipped file named example.gtf.gz)
wget -O example.gtf.gz ftp://ftp.ensemblgenomes.org/pub/release-39/fungi/gtf/fungi_basidiomycota1_collection/cryptococcus_neoformans_var_grubii_h99/Cryptococcus_neoformans_var_grubii_h99.CNA3.39.gtf.gz
```

## `curl`

```{bash}
#| eval: false
#| cache: TRUE
#| class-output: .output-scroll
# cd to ~/Desktop/shell-lesson-data
cd ~/Desktop/shell-lesson-data

# wget file (using lowercase -o as the flag to create a gzipped file name example.gtf.gz)
curl -o example.gtf.gz ftp://ftp.ensemblgenomes.org/pub/release-39/fungi/gtf/fungi_basidiomycota1_collection/cryptococcus_neoformans_var_grubii_h99/Cryptococcus_neoformans_var_grubii_h99.CNA3.39.gtf.gz
```

:::
You can unzip the file as below, depending on the command you want to use.

```{bash}
#| eval: false
#| cache: TRUE
# cd to ~/Desktop/shell-lesson-data
cd ~/Desktop/shell-lesson-data

# gunzip file
gunzip example.gtf.gz
```

```{bash}
#| eval: true
#| cache: TRUE
# cd to ~/Desktop/shell-lesson-data
cd ~/Desktop/shell-lesson-data

# view it
head example.gtf
```

GTF files contain the following information, as columns (fields)

- chromosome name
- annotation source
- feature-type
- genomic start
- genomic end
- score
- strand
- genomic phase
- additonal information (gene_id, etc.)

---

#### Analysis

Using the commands we've learned thus far, let's explore the `example.gtf` file to answer the following:

1. How many chromosomes does the organism have?
2. How many unique gene ids does the organism have?
3. Which chromosome has the most genes?

##### How many chromosomes does the organism have?

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data

# print the file to the screen to pipe it into grep
# remove the lines with #! because they'll get in the way
# cut to keep the first column (chromosomes)
# sort the chromosomes numerically, removing duplicates
cat example.gtf | grep -v '^#' | cut -f1 | sort -nu 
```

This organism has 14 + Mt chromosomes.

##### How many genes does the organism have?

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data

# print the file to the screen to pipe it into grep
# remove the lines with #! because they'll get in the way
# cut to keep the third column (biotype)
# sort values
# keep unique values, specifying counts of each unique value
cat example.gtf | grep -v '^#' | cut -f3 | sort | uniq -c
```

This organism has 8497 genes.

##### Which chromosome has the most genes?

```{bash}
#| eval: TRUE
#| cache: true
# cd to directory
cd ~/Desktop/shell-lesson-data

# print the file to the screen to pipe it into grep
# remove the lines with #! because they'll get in the way
# cut to keep the first and third columns (chromosome, biotype)
# sort values
# keep unique values, specifying counts of each unique value to get totals of biotypes by chromosome
# pull out gene biotype totals
cat example.gtf | grep -v '^#' | cut -f1,3 | sort | uniq -c | grep 'gene'
```

Chromosome 1 has the most genes, 1033. Mt has the least, 42.

As we can see, piping commands together allows us to easily perform analyses as a set of commands. In the next lesson, we'll learn about how we can use loops and scripts to do this even more efficiently.