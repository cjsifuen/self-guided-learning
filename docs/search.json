[
  {
    "objectID": "domain-specific-series.html",
    "href": "domain-specific-series.html",
    "title": "Domain-Specific Series",
    "section": "",
    "text": "Hands-on tutorials created for members of the Neurodegeneration Challenge Network (NDCN), and taught at NDCN Office Hours. Past series materials will be added here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Unix Shell\n\n\nLearn the basics of the Unix Shell\n\n\n\nChristopher Sifuentes\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Self-Guided Learning",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 Christopher Sifuentes\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A resource for self-guided learning",
    "section": "",
    "text": "Computational biology approaches have become common in biological research, and an essential tool for many labs. Still, the complexity and ever changing nature of computational approaches can make learning to design, analyze, and interpret these data a daunting task.\nWhile not exhaustive, we’ve pulled together a set of self-guided learning resources for readers beginning their computational biology journey. Included are learning-oriented tutorials, task-oriented how-to guides, and information-oriented references. The formats vary from YouTube courses and MOOCs to website-based books and cheat-sheets.\n\nResource Descriptions\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware Installs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomain-Specific Series\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "1-Reproducibility/series-introduction.html",
    "href": "1-Reproducibility/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nWhile intended for those with prior coding experience (either in R, python, or bash), this first several sections of this training can be very helpful for beginners. The concepts introduced and covered here are meant to help one move toward computational reproducibility.\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\nIntroduction to Bioinformatic Reproducibility\n\n\nSession 2\nGood Enough Practices\n\n\nSession 3\nPlan for Reproducibility\n\n\nSession 4\nTutorial: A Practical Introduction to Reproducible Computational Workflows\n\n\nSession 5\nSnakemake\n\n\n\n\n\nCitations\n\nTen simple rules for writing and sharing computational analyses in Jupyter Notebooks. Rule A, Birmingham A, Zuniga C, Altintas I, Huang SC, Knight R, Moshiri N, Nguyen MH, Rosenthal SB, Pérez F, Rose PW. PLoS Comput Biol. 2019 Jul 25;15(7):e1007007. doi: https://doi.org/10.1371/journal.pcbi.1007007\nReproducibility, Research Objects, and Reality. Gable C. 2016 Nov 24. https://www.slideshare.net/carolegoble/reproducibility-research-objects-and-reality-leiden-2016\nBaker M. 1,500 scientists lift the lid on reproducibility. Nature. 2016 May 26;533(7604):452-4. doi: 10.1038/533452a. PMID: 27225100.\nYang-Min Kim, Jean-Baptiste Poline, Guillaume Dumas, Experimenting with reproducibility: a case study of robustness in bioinformatics, GigaScience, Volume 7, Issue 7, July 2018, giy077, https://doi.org/10.1093/gigascience/giy077"
  },
  {
    "objectID": "software-installs.html",
    "href": "software-installs.html",
    "title": "Software Installs",
    "section": "",
    "text": "Information on how to install some commonly used software and tools.\n\n\nBash\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#shell-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#shell-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#shell-linux\n\n\n\n\n\n\nConda (miniconda)\nInstall miniconda, not Anaconda.\nThis will also install Python, so if you wish to use a specific version of Python, you with want to specify that specific version when installing.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html\n\n\nmacOS\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html\n\n\nLinux\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\n\n\n\n\n\n\nGit\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#git-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#git-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#git-linux\n\n\n\n\n\n\nJupyter\nI recommend installing through conda. See the conda install above first if you need to install conda, then follow the instructions below.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://jupyter.org/install\n\n\nmacOS\nhttps://jupyter.org/install\n\n\nLinux\nhttps://jupyter.org/install\n\n\n\n\n\n\nPosit (formerly Rstudio)\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://posit.co/downloads/\n\n\nmacOS\nhttps://posit.co/downloads/\n\n\nLinux\nhttps://posit.co/downloads/\n\n\n\n\n\n\nPython\nPython will also come installed with conda (depending on the installer that is used, I think). Choose the Python version that most of your packages will need. If you are unsure, I would start with Python 3.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://realpython.com/installing-python/#how-to-install-from-the-full-installer\n\n\nmacOS\nhttps://realpython.com/installing-python/#step-1-download-the-official-installer\n\n\nLinux\nhttps://realpython.com/installing-python/#how-to-install-on-ubuntu-and-linux-mint\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nmacOS\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nLinux\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\n\n\n\n\nSnakemake\nI recommend installing this through conda. See the conda install above to first install conda, then follow the instructions below. I also recommend installing through mamba if possible.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nmacOS\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nLinux\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html"
  },
  {
    "objectID": "learning-resources-tools.html",
    "href": "learning-resources-tools.html",
    "title": "Learning Resources - Tools",
    "section": "",
    "text": "A collection of self-guided learning resources for modern software and data tools.\n\nMODERN SCIENCE NOTEBOOK 101\n\n\nGit / GitHub\nIntroduction to GitHub\nGithub Flow\nBest Practices Example from Utrecht University\nCollaborating on GitHub\nGitHub Skills Course\n\n\nCharts and Diagrams\nMermaid"
  },
  {
    "objectID": "learning-resources.html",
    "href": "learning-resources.html",
    "title": "Learning Resources",
    "section": "",
    "text": "While not exhaustive, we’ve pulled together a set of self-guided learning resources for readers beginning their computational biology journey. Included are learning-oriented tutorials, task-oriented how-to guides, and information-oriented references. The formats vary from YouTube courses and MOOCs to website-based books and cheat-sheets.\nSearch, sort, and filter the resources below :)\n\n\n\n\n\n\n\n\n\nExpand/Collapse All"
  },
  {
    "objectID": "0-The-Unix-Shell/series-introduction.html",
    "href": "0-The-Unix-Shell/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nThis training series is intended for absolute beginners and focused on the basic usage of the Bash Shell. Concepts introduced in these sessions are foundational to the application of computational approaches and will enable more powerful and reproducible research.\nBy the end of the series, you should be able to\n\ndescribe the Unix file system structure\nnavigate the Unix file system from the command line\ncreate, view, and manipulate files and directories\nchain bash shell commands together\ncreate a basic Bash shell script to automate tasks\n\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\n\nIntroducing the Shell\nThe File System\n\n\n\nSession 2\n\nWildcards and Pattern Matching\nPipes and Filters\n\n\n\nSession 3\n\nLoops\nBash Scripting\n\n\n\nSession 4\n\nPutting it All Together\n\n\n\n\n\n\nCitations\n\nGabriel A. Devenyi (Ed.), Gerard Capes (Ed.), Colin Morris (Ed.), Will Pitchers (Ed.), Greg Wilson, Gerard Capes, Gabriel A. Devenyi, Christina Koch, Raniere Silva, Ashwin Srinath, … Vikram Chhatre. (2019, July). swcarpentry/shell-novice: Software Carpentry: the UNIX shell, June 2019 (Version v2019.06.1). Zenodo. http://doi.org/10.5281/zenodo.3266823\nComputational Foundations Workshop. (n.d.). Retrieved December 7, 2022, from https://umich-brcf-bioinf.github.io/2022-10-31-umich-computational-foundations/html/index.html\n\nNote: This series has been adapted from the Carpentries course entitles “The Unix Shell” [1] as well as the “Computational Foundations Workshop” [2], created by the University of Michigan Bioinformatics Core Workshop Team"
  },
  {
    "objectID": "0-The-Unix-Shell/introducing-the-shell.html",
    "href": "0-The-Unix-Shell/introducing-the-shell.html",
    "title": "Introducing the Shell",
    "section": "",
    "text": "What is the shell?\nThe shell (also known as the command-line) is a program that allows us to tell the computer what to do by giving it a “command” Figure 1a.\n\n\n\n\n\n\nTip\n\n\n\nOther names for the shell are terminal, Bash, UNIX command line, and more.\n\n\nAnother common way we tell the computer what to do is through the use of a “point and click” graphical user interface (GUI) approach Figure 1b.\n\n\n\n\n\n\n\n(a) Command Line Interface (CLI)\n\n\n\n\n\n\n\n(b) Graphical User Interface (GUI)\n\n\n\n\nFigure 1: Different ways to interact with a computer\n\n\n\n\n\nWhy use the shell?\nIsn’t pointing and clicking easier? Imagine you had the following task:\n\n\n\n\n\n\nYou have a directory with 10 .txt files.\nPull the first line from each file into a single new file. You should end up with a list of all of the first lines.\n\n\n\nTake a look below to see the process for GUI and CLI.\n\nGUI StepsCLI Code\n\n\n1. Create new file\n2. Open file 1, copy line 1, paste into new file, close file 1.\n3. Open file 2, copy line 1, paste into new file, close file 2.\n4. Repeat 7 more times\n\n\nhead -n1 -q *.txt > new-file.txt\n\n\n\nFor this task, the GUI was tedious, time-consuming, and error-prone while the CLI was a single-command, quick, and relatively error proof.\n\n\n\nAccessing the Shell\nLet’s start using the shell. Open the shell (terminal) on your computer. Select the appropriate instructions below, based on your operating system.\n\nWindows InstructionsmacOS Instructions\n\n\n\nGo the the Start menu and select “All Apps”.\nScroll down the list of applications and select the Git option.\nFrom the drop-down menu, select Git Bash.\nA terminal should open up.\n\n\n\n\nOpen Finder and go to the Applications tab.\nScroll down the list of applications and select Utilities.\nSelect Terminal.\nA terminal should open up.\n\n\n\n\n\n\n\nUsing the shell\nOnce we open our terminal, the $ shows us that shell is ready for input.\nLet’s see what day it is using the ls command.\n\nls stands for list\nlists the objects in a location\n\nIn your terminal, type ls and press enter.\n\nls\n\nexercise-data\nnorth-pacific-gyre\nthesis\n\n\nBefore we learn more commands, let’s learn about the structure of commands.\n\n\n\nCommand syntax\nCommands follow a general syntax\ncommand option/flag argument\n\ncommand – the main command\noption/flag – modifies the behavior of the command, often optional\nargument – the source and/or target of the command, sometimes optional\n\n\n\n\n\n\n\nTip\n\n\n\n\nOptions use either - or -- to signal their usage.\nArguments can be either a target (as in the ls command) or both a source and target (as in the mv command)\n\n\n\n\nAlter Command Behavior\nLet’s change the way ls command behaves by providing a value for the option.\nIn your terminal, type ls -F and press enter.\n\nls -F\n\nexercise-data/\nnorth-pacific-gyre/\nthesis/\n\n\nThis -F option/flag returns the output in a different format, with a / following directories and @ preceeding symbolic links.\n\n\n\n\nGetting help\nTo better understand command usage and their options we can use the following (depending on the command).\n\n\n\n\n\n\n\n\nMethod of getting help\nDescription\nExample\n\n\n\n\n--help or -h option/flag\nDisplays help menu for the command/program\nls --help\n\n\nman command\nDisplays the manual for the command/program in-depth\nman ls\n\n\n\n\n\n\n\n\n\n\n(a) Using the --help flag\n\n\n\n\n\n\n\n(b) Using the man command\n\n\n\n\nFigure 2: Different ways to get help with a command.\n\n\n\n\n\nMaking sense of errors\nThe shell provides (usually) helpful and informative error messages.\nFor example, if you look closely at the ls --help example above, you’ll see that the usage of --help actually resulted in an error (see below).\nQ&A: What is the error telling us?\n\nls: unrecognized option `--help'\nusage: ls [-@ABCFGHILOPRSTUWabcdefghiklmnopqrstuvwxy1%,] [--color=when] [-D format] [file ...]\n\n\nQ&A: What is the error above telling us?\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n--help is an unrecognized option\n\nThe correct usage and options for ls"
  },
  {
    "objectID": "0-The-Unix-Shell/installation.html",
    "href": "0-The-Unix-Shell/installation.html",
    "title": "Installation and Resources",
    "section": "",
    "text": "Software\nFor this series, you will need access to the Bash shell. Linux and macOS users will have access to this already and should not need to install anything.\nWindows users will need to do some extra work.\n\nInstall Git for Windows, which will provide acess to Bash shell and Git by following the instructions here.\n\n\n\nData\nThese data are zipped and should begin downloading once the link below is clicked.\n\nClick here to download the data.\nMove the shell-lesson-data.zip file from your Downloads to your Desktop.\nUnzip the file to extract the data. You should end up with a shell-lesson-data directory on your Desktop."
  },
  {
    "objectID": "0-The-Unix-Shell/the-file-system.html",
    "href": "0-The-Unix-Shell/the-file-system.html",
    "title": "The File System",
    "section": "",
    "text": "A Common Structure\nThe file system manages and organizes our files and directories using a common structure defined by:\n\nParent-child relationships\nA “family tree” (more like a root system) of “parent” and “child” relationships (Figure 1a).\nDirectionality\nParent items are at the top/up; child items are at the bottom/ down (Figure 1a).\nDifferent ways to access\nAccessible via command-line (Figure 1b) and GUI (Figure 1c).\n\n\n\n\n\n\n\n\n(a) A representative file system with parent-child relationships shown.\n\n\n\n\n\n\n\n\n\n(b) Accessing the file system via the command-line.\n\n\n\n\n\n\n\n(c) Accessing the file system via graphical interface.\n\n\n\n\nFigure 1: A representative file system.\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe top-most directory is called the root directory and is shown with the /.\n\n\n\n\n\nPaths\nThe directories, files, and subdirectories of a file system are connected by paths. Paths also describe the locations within the file system.\n\n\n\nFigure 2: The absolute path from / to mouse.gtf, highlighted in red.\n\n\n\nAbsolute and Relative Paths\nThere are two types of paths:\n\nAbsolute path\nThe path taken from the top-most directory (root, /), to the specified file or directory. The absolute path always starts with /.\nRelative path\nThe path taken from the present working directory to the specified file or directory.\n\nExample paths to a few items from Figure 1a are shown below.\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path (from the /bin directory)\n\n\n\n\nplot.R\n/bin/plot.R\nplot.R\n\n\nconda\n/bin/conda\nconda\n\n\n\n\n\n., .., and ~ aliases\nThe characters ., .. and ~ have special meaning in the unix shells.\n\n. – Current directory\n.. – Parent directory\n~ – Users home directory\n\nFor example the following code means to do_the_thing in the current directory.\n\ndo_the_thing ./\n\nThe code below means to do_the_thing two directories above our current directory.\n\ndo_the_thing ../../\n\nFinally, the code below means to do_the_thing in the user’s home directory.\n\ndo_the_thing ~\n\n\nQ&A: If we are in the /tmp directory, what are the absolute and relative paths of the genome.fa file?\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path\n\n\n\n\ngenome.fa\n/data/genome.fa\n../data/genome.fa\n\n\n\n\n\n\n\n\n\n\n\nNavigating the File System\nLet’s learn a few useful commands for moving around the file system.\n\npwd – print working directory\nPrints out our current location, called our “working directory”.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\npwd\n\n\n\n\n\nRun the pwd command in your terminal.\n\npwd\n\n/Users/csifuentes/Desktop/shell-lesson-data\n\n\n\nQ&A: Is the path returned an absolute or relative path?\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\nAbsolute, the path starts with /. Also, pwd will always return the absolute path (from the root directory).\n\n\n\n\n\n\n\nls – list\nLists the items in a directory.\nWithout a target, the command defaults to the current directory (./)\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nls\nflags\npath/to/directory\n\n\n\nIn terminal, type ls and press enter/return.\n\nls\n\nexercise-data\nnorth-pacific-gyre\n\n\nItems in your home directory is listed, alphabetically. Flags/options can make the output more useful, a few are shown below.\n\n\n\n\n\n\n\nFlag\nDescription\n\n\n\n\n-l\nReturns the results in a long format, which provides information about\n\nthe item type (- for file, d for directory, l for link)\nitem permissions\nthenumber of links or files inside that item\nthe item owner\nthe item group\nthe time the item was created\nitem size\nitem name\n\n\n\n-h\nReturns the results with a human-readible size value\n\n\n-a\nIncludes entries beginning with a ., which are not shown by default\n\n\n\nLet’s use these 3 flags together. Type the ls -lha into your terminal.\n\nls -lha\n\ntotal 16\ndrwxrwxr-x@  5 csifuentes  staff   160B Mar  2 11:54 .\ndrwx------@  6 csifuentes  staff   192B Feb 27 13:35 ..\n-rw-r--r--@  1 csifuentes  staff   6.0K Feb 27 18:00 .DS_Store\ndrwxrwxr-x@  7 csifuentes  staff   224B Sep 16  2021 exercise-data\ndrwxrwxr-x@ 21 csifuentes  staff   672B Sep 16  2021 north-pacific-gyre\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe . is also used to hide items.\n\n\n\n\n\ncd – change directory\nChanges our location in the file system.\nNote: Without a target directory, cd will default to the user home directory.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\ncd\n\npath/to/directory\n\n\n\n\nQ&A: Change your current working directory to be one directory above the current directory, then check the new working directory location and list it’s contents.\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\ncd ..\npwd\nls -lha\n\n/Users/csifuentes/Desktop\ntotal 920\ndrwx------@  6 csifuentes  staff   192B Feb 27 13:35 .\ndrwxr-xr-x+ 73 csifuentes  staff   2.3K Mar  2 11:54 ..\n-rw-r--r--@  1 csifuentes  staff   6.0K Feb 17 11:08 .DS_Store\n-rw-r--r--   1 csifuentes  staff     0B Sep 22  2020 .localized\ndrwxrwxr-x@  5 csifuentes  staff   160B Mar  2 11:54 shell-lesson-data\n-rw-r--r--@  1 csifuentes  staff   450K Feb 24 15:42 shell-lesson-data.zip\n\n\n\n\n\n\nNow let’s move back into the shell-lesson-data directory.\n\ncd ~/Desktop/shell-lesson-data\n\n\n\n\nmkdir – make directory\nCreates new directories.\nNote: The -p flag will create the directory and any required intermediate directories.\n\n\n\n\n\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nmkdir\nflags\npath/to/directory path/to/additional/directory\n\n\n\nLet’s pretend we want to create a directory structure for our thesis work. We need the following:\n\nA top-level directory.\nSeparate directories for each chapter (we have 5).\nDirectories for images, data, and text of each chapter.\n\nWe’ll do this using only the commands we’ve learned thus far (except for my use of tree to easily view directory structures). Later, we’ll learn quicker ways to do this.\nMake a top-level directory.\n\n# let's first change into our shell-lesson-data directory\ncd ~/Desktop/shell-lesson-data\n\n# make the directory\nmkdir -p thesis\n\n# look at the structure of thesis\ntree thesis\n\nthesis\n\n0 directories, 0 files\n\n\nCreate a directory for each chapter.\n\n# create all of the directories at one time\nmkdir -p thesis/chapter_1 thesis/chapter_2 thesis/chapter_3 thesis/chapter_4 thesis/chapter_5\n\n# look at the structure of thesis\ntree thesis\n\nthesis\n├── chapter_1\n├── chapter_2\n├── chapter_3\n├── chapter_4\n└── chapter_5\n\n5 directories, 0 files\n\n\nCreate a directory for each subsection of each chapter.\n\n# create sub-directories in each chapter\nmkdir -p thesis/chapter_1/images thesis/chapter_1/data thesis/chapter_1/text\nmkdir -p thesis/chapter_2/images thesis/chapter_2/data thesis/chapter_2/text\nmkdir -p thesis/chapter_3/images thesis/chapter_3/data thesis/chapter_3/text\nmkdir -p thesis/chapter_4/images thesis/chapter_4/data thesis/chapter_4/text\nmkdir -p thesis/chapter_5/images thesis/chapter_5/data thesis/chapter_5/text\n\n# look at the structure of thesis\ntree thesis\n\nthesis\n├── chapter_1\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_2\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_3\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_4\n│   ├── data\n│   ├── images\n│   └── text\n└── chapter_5\n    ├── data\n    ├── images\n    └── text\n\n20 directories, 0 files\n\n\n\n\n\n\n\n\nGood file and directory names\n\n\n\nComplicated names make it difficult when working on the CL\n\nDo not use spaces – bash reads these a separate arguments\nDo not begin with a dash, “-” – bash reads these a options\nUse alpha-numeric, ., -, and _\n\nIf you need refer to a file/directory that contains a space, put the entire thing in ” ”\n\"/root/subdir/file with spaces\"\n\n\n\n\n\n\nWorking in the File System\nNow let’s learn some useful ways to work in the file system.\n\nText Editors\nAllow one to create and edit text files\n\nusing plain characters only, unlike MS Word and Google Docs\nvarying easy of use and capability of the text editors\ncan use in-terminal (in the shell) or GUI (external)\n\n\n\n\nIn-Terminal Examples\nGUI Examples\n\n\n\n\npico, nano\nnotepad, notepad++\n\n\nemacs, Vim\nAtom, Visual Studio Code\n\n\n\n\n\n\n\n\n(a) In-terminal Editor – nano\n\n\n\n\n\n(b) GUI Editor – Visual Studio Code\n\n\nFigure 3: In-live vs GUI text editors\n\n\nContinuing with our thesis work, let’s create a README.txt file to keep track of each chapter directory.\n\n\nnano – in-line text editor\nOpens the editor into a file (or new file if it doesn’t exist).\nNote: Creates the target file if it does not already exist. Flags and arguments are optional here.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nnano\nflags\npath/to/file\n\n\n\nLet’s create the README.txt file in our thesis directory.\n\nnano ~/Desktop/shell-lesson-data/thesis/README.txt\n\nA file will open in the editor. Follow the directions in Figure 4 below.\n\n\n\nFigure 4: Edit and save the file as README.txt using the nano editor.\n\n\nLooking in thesis, we see our new file.\n\nls ~/Desktop/shell-lesson-data/thesis\n\nREADME.txt\nchapter_1\nchapter_2\nchapter_3\nchapter_4\nchapter_5\n\n\n\n\n\ncp – copy\nCopies and pastes items with a single command.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\ncp\nflags\npath/to/source path/to/destination\n\n\n\nIt might be nice to have a README in each chapter directory. Let’s use the cp command to do this.\n\n# copy to each chapter directory\ncp thesis/README.txt thesis/chapter_1/\ncp thesis/README.txt thesis/chapter_2/\ncp thesis/README.txt thesis/chapter_3/\ncp thesis/README.txt thesis/chapter_4/\ncp thesis/README.txt thesis/chapter_5/\n\n# view the structure of thesis\ntree thesis\n\nthesis\n├── README.txt\n├── chapter_1\n│   ├── README.txt\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_2\n│   ├── README.txt\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_3\n│   ├── README.txt\n│   ├── data\n│   ├── images\n│   └── text\n├── chapter_4\n│   ├── README.txt\n│   ├── data\n│   ├── images\n│   └── text\n└── chapter_5\n    ├── README.txt\n    ├── data\n    ├── images\n    └── text\n\n20 directories, 6 files\n\n\nThis was tedious. Don’t worry, we’ll learn more efficient ways to do this.\n\n\n\nmv – move and rename\nMoves and renames items, including files and directories. Note that the last argument is the destination.\n\n\n\n\n\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nmv\nflags\npath/to/source path/to/other/source path/to/destination\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe mv command will overwrite a files without warning!\n\nuse the -n flag to prevent overwriting existing files\nuse the -i flag to prompt for confirmation before overwriting existing files\n\n\n\nLet’s rename the README.txt file in the chapter 1 directory so that it contains the chapter number.\n\n# rename the file\nmv thesis/chapter_1/README.txt thesis/chapter_1/README_1.txt\n\n# list files in chapter 1\nls thesis/chapter_1\n\nREADME_1.txt\ndata\nimages\ntext\n\n\n\n\n\nrm – remove\nDeletes the specified target.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nrm\nflags\npath/to/target\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nUnlike in the GUI, rm deletes items permanently!\n\nuse the -r flag to remove files and directories recursively\nuse the -i flag to prompt for confirmation before deleting each item\n\n\n\nFor fun, let’s remove the thesis directory.\n\n# remove the items (files and directories) recursively\nrm -r thesis\n\n# list items in shell-lesson-data\nls\n\nexercise-data\nnorth-pacific-gyre\n\n\n\n\n\n\nIntroducing Wildcards\nWildcards represent 0 or more characters and are used for pattern matching.\n\n* – 0 or more characters\n\n? – exactly 1 character\n\nLet’s see some examples with of each. From our shell-lesson-data/exercise-data/proteins.\nListing all files.\n\n# cd into the directory\ncd ~/Desktop/shell-lesson-data/exercise-data/proteins\n\n# list all files in proteins\nls \n\ncubane.pdb\nethane.pdb\nmethane.pdb\noctane.pdb\npentane.pdb\npropane.pdb\n\n\nListing files ending in ethane.pdb, using *. Note that we use the * at the end becuase all files have the same .pdb ending, so this is faster.\n\n# cd into the directory\ncd ~/Desktop/shell-lesson-data/exercise-data/proteins\n\nls *ethane.*\n\nethane.pdb\nmethane.pdb\n\n\nListing files ending in ethane.pdb with a preceeding character, using ?.\n\n# cd into the directory\ncd ~/Desktop/shell-lesson-data/exercise-data/proteins\n\nls ?ethane.*\n\nmethane.pdb\n\n\nAs shown above, wildcards can be used together and combined in different ways to form complex patterns.\nFor example, we can use ???ane.pdb together to indicate any 3 characters followed by ane.pdb.\n\n# cd into the directory\ncd ~/Desktop/shell-lesson-data/exercise-data/proteins\n\n# list all files with 3 characters followed by ane.pdb\nls ???ane.pdb\n\ncubane.pdb\nethane.pdb\noctane.pdb\n\n\n\n\n\nQuiz Time\n\nQuestion 1:\nStarting from /Users/amanda/data, which command(s) whould take Amanda to her home directory (/Users/amanda)?\n\n\n\n\n\n\na.) cd .\n\n\n\n\n\nNO, will be in the same place\n\n\n\n\n\n\n\n\n\nb.) cd /\n\n\n\n\n\nNO, will be in root\n\n\n\n\n\n\n\n\n\nc.) cd /home/amanda\n\n\n\n\n\nNO, not where we want to be\n\n\n\n\n\n\n\n\n\nd.) cd ../..\n\n\n\n\n\nNO, will be in /Users\n\n\n\n\n\n\n\n\n\ne.) cd ~\n\n\n\n\n\nYES, ~ is an alias for the user’s home directory\n\n\n\n\n\n\n\n\n\nf.) cd home\n\n\n\n\n\nNO, not a thing\n\n\n\n\n\n\n\n\n\ng.) cd\n\n\n\n\n\nYES, without input cd will take you to the home directory\n\n\n\n\n\n\n\n\n\nh.) cd ..\n\n\n\n\n\nYES\n\n\n\n\n\nQuestion 2:\nWith the file system shown, if pwd displays Users/thing, what will ls -F ../backup display?\nNote: -F adds a / to the end of directories.\n\n\n../backup: No such file or directory\n2012-12-01 2013-01-08 2013-01-27\n2012-12-01/ 2013-01-08/ 2013-01-27/\noriginal/ pnas_final/ pnas_sub/\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n../backup/ refers to /Users/backup\n\n\n\n\n\n\nQuestion 3:\nWith the file system below, if pwd displays /Users/backup and ls -r displays items in reverse order, what command(s) will result in the following output?\npnas_sub/ pnas_final/ original/\n\n\nls pwd\nls -r -F\nls -r -F /Users/backup\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nYES.\nYES.\n\n\n\n\n\n\nQuestion 4:\nChris runs the following commands and realizes that sucrose.dat and maltose.dat should be in the raw/ directory.\n\n$ ls -F\n analyzed/ raw/\n$ ls -F analyzed\nfructose.dat glucose.dat maltose.dat sucrose.dat\n$ cd analyzed\n\nComplete the command below to move these files into the raw/ directory.\n\n$ mv sucrose.dat maltose.dat _____/____\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n$ mv sucrose.dat maltose.dat ../raw\n\n\n\n\n\n\nQuestion 5:\nChris gave you a file named file.txt, which contains a list of his favorite animals. You want to rename it to why_do_i_need_this.txt. Which of the following commands would do the trick?\n\ncp file.txt why_do_i_need_this.txt\nmv file.txt why_do_i_need_this.txt\nmv file.txt .\ncp file.txt .\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nNo. This creates a new file instead of renaming the old file.\nYES. This renames the file.\nNo. This moves the file to the current directory with no new file name – would throw an error.\nNo. This copies the file to the current directory with no new file name – would throw an error.\n\n\n\n\n\n\nQuestion 6:\nWhat is the output of the final ls command in the sequence shown below?\n\n$ pwd\n /Users/jamie/data\n$ ls \n proteins.dat\n$ mkdir recombined\n$ mv proteins.dat recombined/\n$ cp recombined/proteins.dat ../proteins-saved.dat\n$ ls\n\n\nproteins-saved.dat recombined\nrecombined\nproteins.dat recombined\nproteins-saved.dat\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nrecombined\n\n\n\n\n\n\nQuestion 7:\nChris accidentally removed a file named important_file.txt. How can the file be retrieved?\n\nrm --undo\n“^Z”, control+Z\nRestore from the “Trash” bin\nIt can’t.\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nIt can’t. Be very careful when removing files/directories.\n\n\n\n\n\n\nQuestion 8:\nWhen run the in proteins/ directory, which command(s) will produce the output below?\nethane.pdb methane.pdb\n\nls *t*ane.pdb\nls *t?ne.*\nls *t??ne.pdb\nls ethane.*\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nNo. Would give ethane.pdb methane.pdb octane.pdb pentane.pdb\nNo. Would give octane.pdb pentane.pdb\nYES.\nNo. Would give ethane.pdb\n\n\n\n\n\n\nQuestion 9:\nSam has the following diretory structure.\n\n.\n├── 2015-10-23-calibration.txt\n├── 2015-10-23-dataset1.txt\n├── 2015-10-23-dataset2.txt\n├── 2015-10-23-dataset_overview.txt\n├── 2015-10-26-calibration.txt\n├── 2015-10-26-dataset1.txt\n├── 2015-10-26-dataset2.txt\n├── 2015-10-26-dataset_overview.txt\n├── 2015-11-23-calibration.txt\n├── 2015-11-23-dataset1.txt\n├── 2015-11-23-dataset2.txt\n├── 2015-11-23-dataset_overview.txt\n├── backup\n│   ├── calibration\n│   └── datasets\n└── send_to_bob\n    ├── all_datasets_created_on_a_23rd\n    └── all_november_files\n\nSam uses the following commands to create a backup directory and another directory to send to her collaborator, Bob.\n\n$ cp *dataset* backup/datasets\n$ cp ____calibration____ backup/calibration\n$ cp 2015-____-____ send_to_bob/all_november_files/\n$ cp ____ send_to_bob/all_datasets_created_on_a_23rd/\n\nHelp Sam by filling in the blanks so that the resulting structure looks like this.\n\n.\n├── 2015-10-23-calibration.txt\n├── 2015-10-23-dataset1.txt\n├── 2015-10-23-dataset2.txt\n├── 2015-10-23-dataset_overview.txt\n├── 2015-10-26-calibration.txt\n├── 2015-10-26-dataset1.txt\n├── 2015-10-26-dataset2.txt\n├── 2015-10-26-dataset_overview.txt\n├── 2015-11-23-calibration.txt\n├── 2015-11-23-dataset1.txt\n├── 2015-11-23-dataset2.txt\n├── 2015-11-23-dataset_overview.txt\n├── backup\n│   ├── calibration\n│   │   ├── 2015-10-23-calibration.txt\n│   │   ├── 2015-10-26-calibration.txt\n│   │   └── 2015-11-23-calibration.txt\n│   └── datasets\n│       ├── 2015-10-23-dataset1.txt\n│       ├── 2015-10-23-dataset2.txt\n│       ├── 2015-10-23-dataset_overview.txt\n│       ├── 2015-10-26-dataset1.txt\n│       ├── 2015-10-26-dataset2.txt\n│       ├── 2015-10-26-dataset_overview.txt\n│       ├── 2015-11-23-dataset1.txt\n│       ├── 2015-11-23-dataset2.txt\n│       └── 2015-11-23-dataset_overview.txt\n└── send_to_bob\n    ├── all_datasets_created_on_a_23rd\n    │   ├── 2015-10-23-dataset1.txt\n    │   ├── 2015-10-23-dataset2.txt\n    │   ├── 2015-10-23-dataset_overview.txt\n    │   ├── 2015-11-23-dataset1.txt\n    │   ├── 2015-11-23-dataset2.txt\n    │   └── 2015-11-23-dataset_overview.txt\n    └── all_november_files\n        ├── 2015-11-23-calibration.txt\n        ├── 2015-11-23-dataset1.txt\n        ├── 2015-11-23-dataset2.txt\n        └── 2015-11-23-dataset_overview.txt\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n$ cp *calibration.txt backup/calibration\n$ cp 2015-11-* send_to_bob/all_november_files/\n$ cp *-23-dataset* send_to_bob/all_datasets_created_on_a_23rd/"
  }
]