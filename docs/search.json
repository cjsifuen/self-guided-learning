[
  {
    "objectID": "domain-specific-series.html",
    "href": "domain-specific-series.html",
    "title": "Domain-Specific Series",
    "section": "",
    "text": "Hands-on tutorials created for members of the Neurodegeneration Challenge Network (NDCN), and taught at NDCN Office Hours. Past series materials will be added here.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe Unix Shell\n\n\nLearn the basics of the Unix Shell\n\n\n\nChristopher Sifuentes\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "LICENSE.html",
    "href": "LICENSE.html",
    "title": "Self-Guided Learning",
    "section": "",
    "text": "MIT License\nCopyright (c) 2023 Christopher Sifuentes\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "A resource for self-guided learning",
    "section": "",
    "text": "Computational biology approaches have become common in biological research, and an essential tool for many labs. Still, the complexity and ever changing nature of computational approaches can make learning to design, analyze, and interpret these data a daunting task.\nWhile not exhaustive, we’ve pulled together a set of self-guided learning resources for readers beginning their computational biology journey. Included are learning-oriented tutorials, task-oriented how-to guides, and information-oriented references. The formats vary from YouTube courses and MOOCs to website-based books and cheat-sheets.\n\nResource Descriptions\n\n\n\n\n\n\n\n\n\n\n\n\n\nLearning Resources\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware Installs\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDomain-Specific Series\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "1-Reproducibility/series-introduction.html",
    "href": "1-Reproducibility/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nWhile intended for those with prior coding experience (either in R, python, or bash), this first several sections of this training can be very helpful for beginners. The concepts introduced and covered here are meant to help one move toward computational reproducibility.\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\nIntroduction to Bioinformatic Reproducibility\n\n\nSession 2\nGood Enough Practices\n\n\nSession 3\nPlan for Reproducibility\n\n\nSession 4\nTutorial: A Practical Introduction to Reproducible Computational Workflows\n\n\nSession 5\nSnakemake\n\n\n\n\n\nCitations\n\nTen simple rules for writing and sharing computational analyses in Jupyter Notebooks. Rule A, Birmingham A, Zuniga C, Altintas I, Huang SC, Knight R, Moshiri N, Nguyen MH, Rosenthal SB, Pérez F, Rose PW. PLoS Comput Biol. 2019 Jul 25;15(7):e1007007. doi: https://doi.org/10.1371/journal.pcbi.1007007\nReproducibility, Research Objects, and Reality. Gable C. 2016 Nov 24. https://www.slideshare.net/carolegoble/reproducibility-research-objects-and-reality-leiden-2016\nBaker M. 1,500 scientists lift the lid on reproducibility. Nature. 2016 May 26;533(7604):452-4. doi: 10.1038/533452a. PMID: 27225100.\nYang-Min Kim, Jean-Baptiste Poline, Guillaume Dumas, Experimenting with reproducibility: a case study of robustness in bioinformatics, GigaScience, Volume 7, Issue 7, July 2018, giy077, https://doi.org/10.1093/gigascience/giy077"
  },
  {
    "objectID": "software-installs.html",
    "href": "software-installs.html",
    "title": "Software Installs",
    "section": "",
    "text": "Information on how to install some commonly used software and tools.\n\n\nBash\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#shell-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#shell-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#shell-linux\n\n\n\n\n\n\nConda (miniconda)\nInstall miniconda, not Anaconda.\nThis will also install Python, so if you wish to use a specific version of Python, you with want to specify that specific version when installing.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/windows.html\n\n\nmacOS\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/macos.html\n\n\nLinux\nhttps://docs.conda.io/projects/conda/en/latest/user-guide/install/linux.html\n\n\n\n\n\n\nGit\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://carpentries.github.io/workshop-template/#git-windows\n\n\nmacOS\nhttps://carpentries.github.io/workshop-template/#git-macos\n\n\nLinux\nhttps://carpentries.github.io/workshop-template/#git-linux\n\n\n\n\n\n\nJupyter\nI recommend installing through conda. See the conda install above first if you need to install conda, then follow the instructions below.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://jupyter.org/install\n\n\nmacOS\nhttps://jupyter.org/install\n\n\nLinux\nhttps://jupyter.org/install\n\n\n\n\n\n\nPosit (formerly Rstudio)\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://posit.co/downloads/\n\n\nmacOS\nhttps://posit.co/downloads/\n\n\nLinux\nhttps://posit.co/downloads/\n\n\n\n\n\n\nPython\nPython will also come installed with conda (depending on the installer that is used, I think). Choose the Python version that most of your packages will need. If you are unsure, I would start with Python 3.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://realpython.com/installing-python/#how-to-install-from-the-full-installer\n\n\nmacOS\nhttps://realpython.com/installing-python/#step-1-download-the-official-installer\n\n\nLinux\nhttps://realpython.com/installing-python/#how-to-install-on-ubuntu-and-linux-mint\n\n\n\n\n\n\nR\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nmacOS\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\nLinux\nhttps://rstudio-education.github.io/hopr/starting.html#how-to-download-and-install-r\n\n\n\n\n\n\nSnakemake\nI recommend installing this through conda. See the conda install above to first install conda, then follow the instructions below. I also recommend installing through mamba if possible.\n\n\n\n\n\n\n\nOS\nInstructions\n\n\n\n\nWindows\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nmacOS\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html\n\n\nLinux\nhttps://snakemake.readthedocs.io/en/stable/getting_started/installation.html"
  },
  {
    "objectID": "learning-resources-tools.html",
    "href": "learning-resources-tools.html",
    "title": "Learning Resources - Tools",
    "section": "",
    "text": "A collection of self-guided learning resources for modern software and data tools.\n\nMODERN SCIENCE NOTEBOOK 101\n\n\nGit / GitHub\nIntroduction to GitHub\nGithub Flow\nBest Practices Example from Utrecht University\nCollaborating on GitHub\nGitHub Skills Course\n\n\nCharts and Diagrams\nMermaid"
  },
  {
    "objectID": "learning-resources.html",
    "href": "learning-resources.html",
    "title": "Learning Resources",
    "section": "",
    "text": "While not exhaustive, we’ve pulled together a set of self-guided learning resources for readers beginning their computational biology journey. Included are learning-oriented tutorials, task-oriented how-to guides, and information-oriented references. The formats vary from YouTube courses and MOOCs to website-based books and cheat-sheets.\nSearch, sort, and filter the resources below :)\n\n\n\n\n\n\n\n\n\nExpand/Collapse All"
  },
  {
    "objectID": "0-The-Unix-Shell/series-introduction.html",
    "href": "0-The-Unix-Shell/series-introduction.html",
    "title": "Series Introduction",
    "section": "",
    "text": "Goals and Topics\nThis training series is intended for absolute beginners and focused on the basic usage of the Bash Shell. Concepts introduced in these sessions are foundational to the application of computational approaches and will enable more powerful and reproducible research.\nBy the end of the series, you should be able to\n\ndescribe the Unix file system structure\nnavigate the Unix file system from the command line\ncreate, view, and manipulate files and directories\nchain bash shell commands together\ncreate a basic Bash shell script to automate tasks\n\n\n\nCode of Conduct\nWe are dedicated to supporting a safe, productive, and harassment-free environment for everyone. Harassment includes offensive comments and behavior related to gender, gender identity and expression, age, sexual orientation, disability, physical appearance, body size, race, ethnicity, religion, technology choices, sexual images, deliberate intimidation, stalking, or inappropriate or unwelcome sexual attention. All communication should be appropriate for a professional audience including people of many different backgrounds.\nIn general:\n\nBe kind to others.\nBe open, supportive, and constructive.\nDo not insult or put down others.\nBehave professionally.\nHarassment and sexist, racist, or exclusionary jokes are not appropriate and will not be tolerated.\n\nThank you for helping make this a welcoming, friendly community for all.\n\n\nSchedule\n\n\n\n\n\n\n\nSession\nLesson\n\n\n\n\nSession 1\n\nIntroducing the Shell\nThe File System\n\n\n\nSession 2\n\nWorking with Files and Directories\nPipes and Filters\n\n\n\nSession 3\n\nLoops\nBash Scripting\n\n\n\nSession 4\n\nFinding Things\n\n\n\n\n\n\nCitations\n\nGabriel A. Devenyi (Ed.), Gerard Capes (Ed.), Colin Morris (Ed.), Will Pitchers (Ed.), Greg Wilson, Gerard Capes, Gabriel A. Devenyi, Christina Koch, Raniere Silva, Ashwin Srinath, … Vikram Chhatre. (2019, July). swcarpentry/shell-novice: Software Carpentry: the UNIX shell, June 2019 (Version v2019.06.1). Zenodo. http://doi.org/10.5281/zenodo.3266823\nComputational Foundations Workshop. (n.d.). Retrieved December 7, 2022, from https://umich-brcf-bioinf.github.io/2022-10-31-umich-computational-foundations/html/index.html\n\nNote: This series has been adapted from the Carpentries course entitles “The Unix Shell” [1] as well as the “Computational Foundations Workshop” [2], created by the University of Michigan Bioinformatics Core Workshop Team"
  },
  {
    "objectID": "0-The-Unix-Shell/introducing-the-shell.html",
    "href": "0-The-Unix-Shell/introducing-the-shell.html",
    "title": "Introducing the Shell",
    "section": "",
    "text": "What is the shell?\nThe shell is one of the ways we can interact with a computer. It is a program that allows us to tell the computer what to do by giving it a “command”. For this reason, it is also commonly called the command-line or command-line interface (CLI).\n\n\n\n\n\n\nTip\n\n\n\nOther names for the shell are terminal, Bash, UNIX command line, and more.\n\n\nAnother, perhaps more common way we tell the computer what to do is through the use of a graphical user interface (GUI). This usually involves a “point and click” approach.\n\n\n\n\n\n\n\n(a) Command Line Interface (CLI)\n\n\n\n\n\n\n\n(b) Graphical User Interface (GUI)\n\n\n\n\nFigure 1: Different ways to interact with a computer\n\n\n\n\n\nWhy use the shell?\nIsn’t pointing and clicking easier? Imagine you had the following task:\n\n\n\n\n\n\nYou have a directory with 10 .txt files.\nPull the first line from each file into a single new file. You should end up with a list of all of the first lines.\n\n\n\nTake a look below to see the process for GUI and CLI.\n\nGUI StepsCLI Code\n\n\n1. Create new file\n2. Open file 1, copy line 1, paste into new file, close file 1.\n3. Open file 2, copy line 1, paste into new file, close file 2.\n4. Repeat 7 more times\n\n\nhead -n1 -q *.txt > new-file.txt\n\n\n\nFor this task, the GUI was tedious, time-consuming, and error-prone while the CLI was a single-command, quick, and relatively error proof.\n\n\n\nAccessing the Shell\nLet’s start using the shell. Open the shell (terminal) on your computer. Select the appropriate instructions below, based on your operating system.\n\nWindows InstructionsmacOS Instructions\n\n\n\nGo the the Start menu and select “All Apps”.\nScroll down the list of applications and select the Git option.\nFrom the drop-down menu, select Git Bash.\nA terminal should open up.\n\n\n\n\nOpen Finder and go to the Applications tab.\nScroll down the list of applications and select Utilities.\nSelect Terminal.\nA terminal should open up.\n\n\n\n\n\n\n\nUsing the shell\nOnce we open our terminal, the $ shows us that shell is ready for input.\nLet’s see what day it is using the cal command.\n\ncal stands for calendar\nprints out the calendar to the terminal\n\nIn your terminal, type cal and press enter.\n\ncal\n\n   February 2023      \nSu Mo Tu We Th Fr Sa  \n          1  2  3  4  \n 5  6  7  8  9 10 11  \n12 13 14 15 16 17 18  \n19 20 21 22 23 24 25  \n26 27 _\b2_\b8              \n                      \n\n\nBefore we learn more commands, let’s learn about the structure of commands.\n\n\n\nCommand syntax\nCommands follow a general syntax\ncommand option argument\n\ncommand – the main command\noption – modifies the behavior of the command, often optional\nargument – the source and/or target of the command, sometimes optional\n\n\n\n\n\n\n\nNote\n\n\n\n\nOptions use either - or -- to signal their usage.\nOptions are sometimes called flags.\nArguments are sometimes called parameters.\nDepending on the command, arguments can be either a target (as in the ls command) or both a source and target (as in the mv command)\nDepending on the command, arguments do not always need to be specified\n\n\n\nLet’s change the way cal command behaves by providing a value for the option.\nIn your terminal, type cal -j and press enter.\n\ncal -j\n\n       February 2023         \n Su  Mo  Tu  We  Th  Fr  Sa  \n             32  33  34  35  \n 36  37  38  39  40  41  42  \n 43  44  45  46  47  48  49  \n 50  51  52  53  54  55  56  \n 57  58 _\b _\b5_\b9                  \n                             \n\n\nThis -j option/flag told the computer that we want to return the calendar using the “Julian” date, which is a numbered day starting at January 1.\n\n\n\nGetting help\nCommand usage is not always intuitive. Additionally, we’re often not aware of all the options/flags that can be used with a particular command. If you need help with how to use a command, you can try the following (depending on the command).\n\n\n\n\n\n\n\n\nMethod of getting help\nDescription\nExample\n\n\n\n\n--help or -h option/flag\nDisplays help menu for the command/program\ncal --help\n\n\nman command\nDisplays the manual for the command/program in-depth\nman cal\n\n\n\n\n\n\n\n\n\n\n(a) Using the --help flag\n\n\n\n\n\n\n\n(b) Using the man command\n\n\n\n\nFigure 2: Different ways to get help with a command.\n\n\n\n\n\nMaking sense of errors\nThe shell provides (usually) helpful and informative error messages. If you look closely at the cal --help example above, you’ll see that the usage of --help actually resulted in an error.\ncal: illegal option -- -\nUsage: cal [general options] [-hjy] [[month] year]\n       cal [general options] [-hj] [-m month] [year]\n       ncal [general options] [-hJjpwy] [-s country_code] [[month] year]\n       ncal [general options] [-hJeo] [year]\nGeneral options: [-NC3] [-A months] [-B months]\nFor debug the highlighting: [-H yyyy-mm-dd] [-d yyyy-mm]\nThe error above tells us:\n1. - is an illegal option\n2. The correct usage and options for cal\nBefore we move on to learning about the File System, try typing three random letters into your terminal and see what happens. Did you receive an error or did you somehow type an actual command?"
  },
  {
    "objectID": "0-The-Unix-Shell/installation.html",
    "href": "0-The-Unix-Shell/installation.html",
    "title": "Installation and Resources",
    "section": "",
    "text": "Software\nFor this series, you will need access to the Bash shell. Linux and macOS users will have access to this already and should not need to install anything.\nWindows users will need to do some extra work.\n\nInstall Git for Windows, which will provide acess to Bash shell and Git by following the instructions here.\n\n\n\nData\nThese data are zipped and should begin downloading once the link below is clicked.\n\nClick here to download the data.\nMove the shell-lesson-data.zip file from your Downloads to your Desktop.\nUnzip the file to extract the data. You should end up with a shell-lesson-data directory on your Desktop."
  },
  {
    "objectID": "0-The-Unix-Shell/the-file-system.html",
    "href": "0-The-Unix-Shell/the-file-system.html",
    "title": "The File System",
    "section": "",
    "text": "File System\nThe file system manages and organizes our files and directories. Operating systems (Windows, macOS, Linux) have a common structure defined by\n\nParent-child relationships – A “family tree” (or more like a root system), where there are “parent” and “child” relationships (Figure 1a).\n\nDirectionality – Parent structures are at the top or “up” and children are at the bottom or “down” (Figure 1a).\nDifferent ways to access – Accessible via command-line (Figure 1b) and gui (Figure 1c).\n\n\n\n\n\n\n\nTip\n\n\n\nThe top-most directory is called the root directory and is shown with the /.\n\n\n\n\n\n\n\n\n\n(a) A representative file system with parent-child relationships shown.\n\n\n\n\n\n\n\n\n\n(b) Accessing the file system via the command-line.\n\n\n\n\n\n\n\n(c) Accessing the file system via graphical interface.\n\n\n\n\nFigure 1: A representative file system.\n\n\n\n\n\nPaths\nThe directories, files, and subdirectories of a file system are connected. The route one would take from one directory or file to another is called a “path”. The path also describes the location of a file or directory within the file system. There are two types of paths:\n\nabsolute path – the path taken from the top-most directory (root, /), to the specified file or directory. The absolute path always starts with /.\nrelative path – the path taken from the present working direcotry to the specified file or directory. The relative path never starts with /.\n\nThe path to a few files from Figure 1a is shown below.\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path (from the /bin directory)\n\n\n\n\nplot.R\n/bin/plot.R\nplot.R\n\n\nconda\n/bin/conda\nconda\n\n\n\nQ&A: What is the absolute and relative path to the mouse.gtf file if we are in the /data directory?\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\n\n\n\n\n\n\n\nTarget\nAbsolute Path\nRelative Path (from the /data directory)\n\n\n\n\nmouse.gtf\n/data/mouse.gtf\nmouse.gtf\n\n\n\n\n\n\n\n\n\nNavigating the File System\nWe’re going to learn how to interact with the File System – by creating a directory structure to hold our project. But first, let’s learn a few useful basic commands.\n\npwd command\nWhen we work in the command line, we are working in a specific location of the file system, called the “current working directory”. The pwd command prints out the working directory location to the screen.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\npwd\n\n\n\n\n\nLet’s try it. Run the pwd command in your terminal.\n\npwd\n\n/Users/csifuentes/Desktop/shell-lesson-data\n\n\nQ&A: Is the path returned an absolute or relative path?\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\nAbsolute. pwd will always return the absolute path (from the root directory).\n\n\n\n\n\n\nls commmand\nWhen we’re using a terminal and in a specific directory, we often want to know which files and directories are in our current working directory. The ls command lists objects (files, directories, etc.) in a location. Without a target, the command defaults to the current directory (./)\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nls\nflags\npath/to/directory\n\n\n\nIn terminal, type ls and press enter/return.\n\nls\n\nexercise-data\nnorth-pacific-gyre\n\n\nEverything that is in your home directory is listed, alphabetically.\nWe can make the output of the ls command even more useful by using additional flags, some of which are listed below.\nThere are A LOT of ls options/flags. A few quite useful ones are shows below.\n\n\n\n\n\n\n\nFlag\nDescription\n\n\n\n\n-l\nReturns the results in a long format, which provides information about\n\nthe item type (- for file, d for directory, l for link)\nitem permissions\nthenumber of links or files inside that item\nthe item owner\nthe item group\nthe time the item was created\nitem size\nitem name\n\n\n\n-h\nReturns the results with a human-readible size value\n\n\n-a\nIncludes entries beginning with a ., which are not shown by default\n\n\n\nLet’s use these 3 flags together. Type the ls -lha into your terminal.\n\nls -lha\n\ntotal 16\ndrwxrwxr-x@  5 csifuentes  staff   160B Feb 27 19:23 .\ndrwx------@  6 csifuentes  staff   192B Feb 27 13:35 ..\n-rw-r--r--@  1 csifuentes  staff   6.0K Feb 27 18:00 .DS_Store\ndrwxrwxr-x@  7 csifuentes  staff   224B Sep 16  2021 exercise-data\ndrwxrwxr-x@ 21 csifuentes  staff   672B Sep 16  2021 north-pacific-gyre\n\n\n\n\n\n\n\n\nTip\n\n\n\nThe . and .. shown in the output above are VERY useful and important aliases.\n\nCurrent directory = . or ./\nParent directory = .. or ../\nParent’s parent directory = ../.. or ../../\n\n\n\n\n\n\ncd command\nChanging our location in the file system done with the cd command. Without a target directory, cd will default to the user home directory.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\ncd\n\npath/to/directory\n\n\n\nQ&A: A little challenge – let’s change our current working directory to be one directory above our current directory, then check the new working directory location and list it’s contents.\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\ncd ..\npwd\nls -lha\n\n/Users/csifuentes/Desktop\ntotal 920\ndrwx------@  6 csifuentes  staff   192B Feb 27 13:35 .\ndrwxr-xr-x+ 73 csifuentes  staff   2.3K Feb 28 11:18 ..\n-rw-r--r--@  1 csifuentes  staff   6.0K Feb 17 11:08 .DS_Store\n-rw-r--r--   1 csifuentes  staff     0B Sep 22  2020 .localized\ndrwxrwxr-x@  5 csifuentes  staff   160B Feb 27 19:23 shell-lesson-data\n-rw-r--r--@  1 csifuentes  staff   450K Feb 24 15:42 shell-lesson-data.zip\n\n\n\n\n\nNow let’s move back into the shell-lesson-data directory.\n\ncd ~/Desktop/shell-lesson-data\n\n\n\n\nmkdir command\nCreating new directories is done with the mkdir command. The -p flag will create the directory and any required intermediate directories.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nmkdir\nflags\npath/to/directory\n\n\n\nLet’s make a new directory called dir1 by typing mkdir dir1.\n\nmkdir -p dir1\n\nIf we list the contents of the directory, we now see a new directory called dir1.\n\nls -lha\n\ntotal 16\ndrwxrwxr-x@  6 csifuentes  staff   192B Feb 28 11:18 .\ndrwx------@  6 csifuentes  staff   192B Feb 27 13:35 ..\n-rw-r--r--@  1 csifuentes  staff   6.0K Feb 27 18:00 .DS_Store\ndrwxr-xr-x   2 csifuentes  staff    64B Feb 28 11:18 dir1\ndrwxrwxr-x@  7 csifuentes  staff   224B Sep 16  2021 exercise-data\ndrwxrwxr-x@ 21 csifuentes  staff   672B Sep 16  2021 north-pacific-gyre\n\n\nIf you want to create a several directories at once, you can do that by adding several targets. You can even create directories within directories.\nFor example, the following code would create directories and subdirectories\n\nmkdir -p dir2/subdir2 dir3/subdir3/sub-subdir3 dir4 dir5\n\n%%| fig-width: 100%\n%%| fig-height: 3\n%%| echo: false\n%%{ init: { 'flowchart': { 'curve': 'linear' } } }%%\ngraph TD\n  id1[Parent Directory] ==> id2[dir1]\n  id1 ==> id3[dir2] ==> id4[subdir2]\n  id1 ==> id5[dir3] ==> id6[subdir3] ==> id7[sub-subdir3]\n  id1 ==> id8[dir4]\n  id1 ==> id9[dir5]\nLet’s check recursively using ls -R.\n\nls -R\n\ndir1\ndir2\ndir3\ndir4\ndir5\nexercise-data\nnorth-pacific-gyre\n\n./dir1:\n\n./dir2:\nsubdir2\n\n./dir2/subdir2:\n\n./dir3:\nsubdir3\n\n./dir3/subdir3:\nsub-subdir3\n\n./dir3/subdir3/sub-subdir3:\n\n./dir4:\n\n./dir5:\n\n./exercise-data:\nanimal-counts\ncreatures\nnumbers.txt\nproteins\nwriting\n\n./exercise-data/animal-counts:\nanimals.csv\n\n./exercise-data/creatures:\nbasilisk.dat\nminotaur.dat\nunicorn.dat\n\n./exercise-data/proteins:\ncubane.pdb\nethane.pdb\nmethane.pdb\noctane.pdb\npentane.pdb\npropane.pdb\n\n./exercise-data/writing:\nLittleWomen.txt\nhaiku.txt\n\n./north-pacific-gyre:\nNENE01729A.txt\nNENE01729B.txt\nNENE01736A.txt\nNENE01751A.txt\nNENE01751B.txt\nNENE01812A.txt\nNENE01843A.txt\nNENE01843B.txt\nNENE01971Z.txt\nNENE01978A.txt\nNENE01978B.txt\nNENE02018B.txt\nNENE02040A.txt\nNENE02040B.txt\nNENE02040Z.txt\nNENE02043A.txt\nNENE02043B.txt\ngoodiff.sh\ngoostats.sh\n\n\n\n\n\ncp command\nIn the shell, copy and paste are done at the same time with a single command, cp.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\ncp\nflags\npath/to/source path/to/destination\n\n\n\nWe can copy a file or directory by providing a source and a destination. Let’s create an empty file using the touch command, then copy it into another directory.\n\ntouch original_file.txt\ncp original_file.txt dir1/new_file.txt\n\n\n\n\nmv command\nThe mv command is used to move and rename items, including files and directories. Note that the last argument is the destination.\n\n\n\n\n\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nmv\nflags\npath/to/source path/to/other/source path/to/destination\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThe mv command will overwrite a files without warning!\n\nuse the -n flag to prevent overwriting existing files\nuse the -i flag to prompt for confirmation before overwriting existing files\n\n\n\nLet’s mv the original file into dir1.\n\nmv original_file.txt dir1\n\nQ&A: Challenge – Move dir2, dir3, dir4, and dir5 into dir1 and rename dir1 to all_dirs.\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nmv dir2/ dir3/ dir4/ dir5/ dir1/\nmv dir1/ all_dirs\n\nChecking with ls\n\nls\n\nall_dirs\nexercise-data\nnorth-pacific-gyre\n\n\n\n\n\n\n\n\nrm command\nDeleting files is done using the rm command, which removes the specified target.\n\n\n\nCommand\nOptions/Flags\nArguments\n\n\n\n\nrm\nflags\npath/to/target\n\n\n\n\n\n\n\n\n\nImportant\n\n\n\nUnlike in the GUI, rm deletes items permanently!\n\nuse the -r flag to remove files and directories recursively\nuse the -i flag to prompt for confirmation before deleting each item\n\n\n\nQ&A: Challenge – Delete the all_dirs directory .\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\nUse the -r flag to remove recursively.\n\nrm -r all_dirs\n\nCheck that it is removed.\n\nls\n\nexercise-data\nnorth-pacific-gyre\n\n\n\n\n\n\n\n\nCleaning up\nAs we work in the terminal commands and outputs are printed to the screen. At times this becomes messy and it will take up the entire terminal screen, in time. We can clear the terminal using the clear commmand.\n\nclear command\n\nclear stands for clear :)\nclears the current terminal shell session\n\n\n\n\n\nHistory\nNow we have a cleared terminal screen – nice and clean. But what if we needed to know some of the commands we ran previously? Don’t worry, the terminal keeps the command history.\n\nhistory command\n\nhistory stands for history\nprints the last x number of commands that were run\n\n\n\n\n\n\n\nTip\n\n\n\nWe can see the most recent command by tapping the “up arrow” on our keyboard. This can be very helpful when we want to run the same command (or edit the command slightly) but do not want to retype the entire command.\n\n\n\n\n\n\nQuiz Time\nQ&A: Starting from /Users/amanda/data, which of the following commands could Amanda use to navigate to her home directory, which is /Users/amanda?\n\ncd .\ncd /\ncd /home/amanda\ncd ../..\ncd ~\ncd home\ncd ~/data/..\ncd\ncd ..\n\n\n\n\n\n\n\nClick here for the answer\n\n\n\n\n\n\nNo. . stands for current directory.\nNo:\nNo\nNo\nNo"
  }
]